<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:si="http://www.springframework.org/schema/integration"
	xmlns:si-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:si-security="http://www.springframework.org/schema/integration/security"
	xmlns:si-stream="http://www.springframework.org/schema/integration/stream"
	xmlns:si-xml="http://www.springframework.org/schema/integration/xml"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		    http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
		    http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		    http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
		    http://www.springframework.org/schema/integration/security http://www.springframework.org/schema/integration/security/spring-integration-security.xsd
			http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
		    http://www.springframework.org/schema/integration/xml http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd
		    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
       		

	<description />


	<!-- Activates scanning of @Autowired -->
	<context:annotation-config />
	
	<!-- Activates scanning of @ServiceActivator -->
	<si:annotation-config />	
	
	<!-- Activates scanning of @Component -->
	<context:component-scan base-package="prototype.eip.spring" />
				
	
	<task:executor id="eipThreadPool"
    		pool-size="5-25"
            queue-capacity="20"
            keep-alive="120" />
			
	<si:logging-channel-adapter id="loggingChannel" log-full-message="true" level="DEBUG" />
	<si-stream:stderr-channel-adapter channel="errorChannel" append-newline="true" />
	<si-stream:stdout-channel-adapter channel="systemOutChannel" append-newline="true"/>
	
	
	<si:publish-subscribe-channel id="errorChannel" ignore-failures="false">
		<si:interceptors>
       		<si:wire-tap channel="loggingChannel" />
     	</si:interceptors>
	</si:publish-subscribe-channel>
	
	<si:publish-subscribe-channel id="systemOutChannel" ignore-failures="false">
		<si:interceptors>
       		<si:wire-tap channel="loggingChannel" />
     	</si:interceptors>
	</si:publish-subscribe-channel>	
	
	<si:publish-subscribe-channel id="outboundPayloadChannel" ignore-failures="false">
		<si:interceptors>
       		<si:wire-tap channel="loggingChannel" />
     	</si:interceptors>
	</si:publish-subscribe-channel>
	
	<si:publish-subscribe-channel id="inboundPayloadChannel" ignore-failures="false">
		<si:interceptors>
       		<si:wire-tap channel="loggingChannel" />
     	</si:interceptors>
	</si:publish-subscribe-channel>
	
	<si:publish-subscribe-channel id="inboundPayloadTransformerChannel">
		<si:interceptors>
       		<si:wire-tap channel="loggingChannel" />
     	</si:interceptors>
	</si:publish-subscribe-channel>
	
	<si:publish-subscribe-channel id="inboundPayloadRouterChannel" ignore-failures="false">
		<si:interceptors>
       		<si:wire-tap channel="loggingChannel" />
     	</si:interceptors>
	</si:publish-subscribe-channel>
	
	<si:publish-subscribe-channel id="secureInboundPayloadRouterChannel" ignore-failures="false">
		<si:interceptors>
       		<si:wire-tap channel="loggingChannel" />
       		<!-- <ref bean="authenticationChannelInterceptor" /> -->
     	</si:interceptors>
	</si:publish-subscribe-channel>
	
	
	<si:channel id="inboundPayloadBridgeChannel">
		<si:queue capacity="3000" />
	</si:channel>
	
	
	<!-- si-amqp:inbound-channel-adapter id="inboundPayloadChannelAdapter"
			channel="inboundPayloadChannel" 
			error-channel="errorChannel"
			queue-names="${rabbit.queue.inbound.name}"
			connection-factory="cachingRabbitMqConnectionFactory" 
			acknowledge-mode="AUTO" / -->
	
	
	<si:header-enricher id="brokerHeadersEnricher" input-channel="inboundPayloadChannel" output-channel="inboundPayloadBridgeChannel">
    	<!-- <si:header name="model-type" value="ACCOUNT" /> TODO specify relevant and useful enrichers here -->
	</si:header-enricher>
	
	<si:bridge id="inboundPayloadBridge" input-channel="inboundPayloadBridgeChannel" output-channel="inboundPayloadTransformerChannel">
		<si:poller max-messages-per-poll="-1" receive-timeout="5000" fixed-rate="3000" />
 	</si:bridge>
	
	
	<si:chain id="loggingPayloadHandlerChain" input-channel="loggingChannel" >
		<si:header-enricher>
			<si:error-channel ref="errorChannel" />
		</si:header-enricher>		
		<si:service-activator ref="loggingPayloadHandler" method="handleLogging" />
	</si:chain>
	
	<si:chain id="outboundPayloadChannelChain" input-channel="outboundPayloadChannel" output-channel="loggingChannel">
		<si:header-enricher>
			<si:error-channel ref="errorChannel" />
		</si:header-enricher>		
		<si:transformer ref="outboundPayloadTransformer" />	
		<!-- si-amqp:outbound-channel-adapter id="outboundPayloadChannelAdapter"           
              amqp-template="rabbitMqTemplate"
              routing-key-expression="headers['payload-destination']" / -->
	</si:chain>	
	           
	           
</beans>